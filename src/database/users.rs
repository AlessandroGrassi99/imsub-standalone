//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: u64,
    pub username: Option<String>,
    pub role: String,
    #[sea_orm(unique)]
    pub twitch_id: Option<u32>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::roles::Entity",
        from = "Column::Role",
        to = "super::roles::Column::Name",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Roles,
    #[sea_orm(
        belongs_to = "super::twitch_users::Entity",
        from = "Column::TwitchId",
        to = "super::twitch_users::Column::TwitchId",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    TwitchUsers,
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::twitch_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TwitchUsers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
