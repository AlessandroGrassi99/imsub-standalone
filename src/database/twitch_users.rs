//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "twitch_users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub twitch_id: u32,
    pub username: Option<String>,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub client_id: String,
    #[sea_orm(unique)]
    pub access_token: String,
    pub access_expires_at: DateTime,
    #[sea_orm(unique)]
    pub refresh_token: String,
    pub token_scopes: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub auth_expired_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::twitch_subscriptions::Entity")]
    TwitchSubscriptions,
    #[sea_orm(has_one = "super::users::Entity")]
    Users,
}

impl Related<super::twitch_subscriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TwitchSubscriptions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
